set nocompatible

let &runtimepath.=','.expand('$XDG_CONFIG_HOME/vim')

" load vundle
filetype off
let &runtimepath.=','.expand('$XDG_CONFIG_HOME/vim/bundle/Vundle')
call vundle#begin()

" let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" my bundles
"Plugin 'Valloric/YouCompleteMe'           " text completion
Plugin 'tpope/vim-surround'               " to wrap object with quotes or anything else
Plugin 'jpalardy/vim-slime'               " to send text from vim to a REPL/tmux/etc.
Plugin 'easymotion/vim-easymotion'        " to go quickly to things in the window
Plugin 'ntpeters/vim-better-whitespace'   " red background for undesired whitespace
Plugin 'tpope/vim-commentary'             " comment stuff out
Plugin 'pangloss/vim-javascript'          " syntax and indent plugins for javascript
Plugin 'tpope/vim-repeat'                 " remaps . in a way that plugins can tap into it
Plugin 'terryma/vim-expand-region'        " visually select increasingly larger regions of text using the same key combination
Plugin 'nathanaelkane/vim-indent-guides'  " indent spaces bg colour changes
Plugin 'terryma/vim-multiple-cursors'     " like in Sublime Ctrl-D behaviour
Plugin 'junegunn/goyo.vim'                " distraction-free //vimroom
Plugin 'junegunn/limelight.vim'           " ultra focus, unsaturates the colour of all but the focussed paragraph
Plugin 'MarcWeber/vim-addon-mw-utils'     " for SnipMate
Plugin 'tomtom/tlib_vim'                  " for SnipMate
Plugin 'garbas/vim-snipmate'              " snippets
Plugin 'amix/vim-zenroom2'                " iA Writer environment when editing Markdown, reStructuredText or text files

call vundle#end()
filetype plugin on " enable filetype plugins (required for vundle)
filetype indent on " load filetype-specific indent files

" easy_motions plugin settings
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nnoremap s <Plug>(easymotion-s)

" Goyo plugin settings to make :q quit vim, not just Goyo
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd User GoyoEnter :call <SID>goyo_enter()
autocmd User GoyoLeave :call <SID>goyo_leave()

" more Goyo plugin settings to get the background right
autocmd User GoyoEnter :highlight Normal ctermbg=234
autocmd User GoyoLeave :highlight Normal ctermbg=none

" Limelight plugin settings
let g:limelight_conceal_ctermfg = 236

syntax enable " enable syntax processing
set t_Co=256
colorscheme wombat256

" indent guide plugin settings
" colors here: http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
hi IndentGuidesOdd  ctermbg=234 " darker
hi IndentGuidesEven ctermbg=235 " lighter dark
let g:indent_guides_auto_colors=0
let g:indent_guides_guide_size=1

" set ctermbg to none to have a transparent vim background
highlight Normal ctermbg=none
highlight SpecialKey ctermbg=none " tabs and spaces background
highlight NonText ctermbg=none
" black ruler at 80
highlight ColorColumn ctermbg=16

" treat md files as markdown for proper markdown syntax highlighting
autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" don't automatically make a comment line when new line under a comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

let mapleader = "\<Space>"

" Goyo keybindings
nmap <leader>g :Goyo<cr>
nmap <leader>l :Limelight!!<cr>

set lazyredraw    " redraw only when we need to.
set numberwidth=1 " space between left window edge and number
set ruler         " numbers in bottom right corner showing row and column number

" search options
set magic       " regular expressions
set incsearch   " search as characters are entered
set ignorecase
set smartcase
nnoremap <leader><space> :nohlsearch<cr>
autocmd InsertEnter * :setlocal nohlsearch
" my workaround, but it doesn't work if I search again using / or ?
nnoremap n n:silent set hlsearch<cr>
nnoremap N N:silent set hlsearch<cr>

nnoremap U <C-r>  " map shift+U to redo

" folding options
set foldenable
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
nnoremap f za           " f open/closes folds
set foldmethod=indent   " fold based on indent level

set encoding=utf-8

set autoindent  " basic indentation (does not interfere with filetype indent)

" tabs options
set expandtab       " tabs into spaces
set tabstop=2       " number of visual spaces per tab
set softtabstop=2   " number of spaces in tab when editing
set shiftwidth=2
set smarttab

" tabs are spaces in matlab/octave
autocmd BufNewFile,BufFilePre,BufRead *.m set filetype=matlab
autocmd Filetype matlab setlocal ts=2 sts=2 sw=2 expandtab
autocmd Filetype octave setlocal ts=2 sts=2 sw=2 expandtab

set list                      " list disables linebreak
set listchars=tab:Â»\ ,trail:Â· " how whitespace looks (trailing spaces, tabulations)

" set timeout for pressing a key after another key (eg. useful for oo binding)
set timeout timeoutlen=200 ttimeoutlen=0

" disable arrow keys
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
" disable arrow keys inserting random letters
" see: http://vim.wikia.com/wiki/Fix_arrow_keys_that_display_A_B_C_D_on_remote_shell#Solution_1
imap <ESC>oA <nop>
imap <ESC>oB <nop>
imap <ESC>oC <nop>
imap <ESC>oD <nop>
" ^ this then causes vim to wait after I press (real) escape to see whether oA is coming, causing a lag :/

" disable backspace and enter keys
nnoremap <BS> <nop>
nnoremap <ENTER> <nop>
nnoremap <SPACE> <nop>

" solved: https://stackoverflow.com/questions/15550100/exit-visual-mode-without-delay
augroup FastEscape
  autocmd!
  autocmd InsertEnter * :set timeoutlen=0
  autocmd InsertLeave * :set timeoutlen=200
augroup END

" http://vim.wikia.com/wiki/Prevent_escape_from_moving_the_cursor_one_character_to_the_left
" https://stackoverflow.com/questions/2295410/prevent-cursor-from-moving-back-one-character-on-insert-mode-exit
inoremap <silent> <Esc> <Esc>`^

" crosshair effect on cursor position
set cursorline
set cursorcolumn

nnoremap oo o<Esc>o
nnoremap OO O<Esc>O

" key bindings for beginning and end of lines
nnoremap 0 ^
nnoremap H ^
nnoremap L $
vnoremap $ $h

" make delete to beginning of word behave the way I keep expecting it to work
" i.e. I usually am already at the end of the word (after typing e) so I want it to delete the last letter as well
nnoremap db dbx
nnoremap dB dBx

" treat long lines as break lines (useful when moving around in them)
noremap j gj
noremap k gk

" move a line of text using Alt+[jk]
" To input the Alt character, use Ctrl+v, Esc
nnoremap j :m .+1<CR>==
nnoremap k :m .-2<CR>==
inoremap j <Esc>:m .+1<CR>==gi
inoremap k <Esc>:m .-2<CR>==gi
vnoremap j :m '>+1<CR>gv=gv
vnoremap k :m '<-2<CR>gv=gv

nnoremap ( {
nnoremap ) }
" go to first line in paragraph (could change this to make sense in terms of blocks with python for eg.)
nnoremap } }j
nnoremap { 2{j
" ^ noremap esp important here so that it doesn't recurse

" move cursor to previous position
nnoremap - ''

" change case
nnoremap ~ ~h

" move between buffers
nnoremap J :wincmd j<CR>
nnoremap K :wincmd k<CR>
nnoremap H :wincmd h<CR>
nnoremap L :wincmd l<CR>


set title         " show the filename in the window titlebar
set scrolloff=10  " start scrolling three lines before the horizontal window border
set undofile      " undo previous actions even after you close and reopen a file
set gdefault      " applies substitutions globally on lines

" make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
set showmatch         " show matching brackets when text indicator is over them [{()}]
set matchpairs+=<:>   " match < and > as well

" one less key to hit every time I want to save a file
nnoremap ; :

" save on losing focus
autocmd FocusLost * stopinsert | :wa

"autocmd FocusLost * :set number
"autocmd FocusGained * :set relativenumber

" disable Ex mode
nnoremap Q <nop>

set backspace=indent,eol,start  " allow backspace in insert mode
set complete-=i
set showcmd                     " show incomplete cmds in bottom right corner
set wildmenu                    " visual autocomplete for command menu
set wildignore=*~,*.pyc         " ignore compiled files

set noerrorbells " no annoying sound on errors
set visualbell   " this seems to actually kill the sound on error

" dim logging statements
highlight logStatement ctermfg=241

let &printexpr="(v:cmdarg=='' ? ".
    \"system('lpr' . (&printdevice == '' ? '' : ' -P' . &printdevice)".
    \". ' ' . v:fname_in) . delete(v:fname_in) + v:shell_error".
    \" : system('mv '.v:fname_in.' '.v:cmdarg) + v:shell_error)"

" return to last edit position when opening files
" doesn't work with Goyo
autocmd BufWinLeave * :mkview
autocmd BufReadPost * :loadview
