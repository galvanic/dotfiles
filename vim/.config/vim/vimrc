set nocompatible

let &runtimepath.=','.expand('$XDG_CONFIG_HOME/vim')

" load vundle
filetype off
let &runtimepath.=','.expand('$XDG_CONFIG_HOME/vim/bundle/Vundle')
call vundle#begin()

" let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" my bundles
Plugin 'tpope/vim-surround'               " to wrap object with quotes or anything else
Plugin 'jpalardy/vim-slime'               " to send text from vim to a REPL/tmux/etc.
Plugin 'easymotion/vim-easymotion'        " to go quickly to things in the window
Plugin 'ntpeters/vim-better-whitespace'   " red background for undesired whitespace
Plugin 'tpope/vim-commentary'             " comment stuff out
Plugin 'pangloss/vim-javascript'          " syntax and indent plugins for javascript
Plugin 'tpope/vim-repeat'                 " remaps . in a way that plugins can tap into it
Plugin 'terryma/vim-expand-region'        " visually select increasingly larger regions of text using the same key combination
Plugin 'nathanaelkane/vim-indent-guides'  " indent spaces bg colour changes
Plugin 'terryma/vim-multiple-cursors'     " like in Sublime Ctrl-D behaviour
Plugin 'junegunn/goyo.vim'                " distraction-free //vimroom
Plugin 'junegunn/limelight.vim'           " ultra focus, unsaturates the colour of all but the focussed paragraph
Plugin 'MarcWeber/vim-addon-mw-utils'     " for SnipMate
Plugin 'tomtom/tlib_vim'                  " for SnipMate
Plugin 'garbas/vim-snipmate'              " snippets
Plugin 'amix/vim-zenroom2'                " iA Writer environment when editing Markdown, reStructuredText or text files

call vundle#end()
filetype plugin on " enable filetype plugins (required for vundle)
filetype indent on " load filetype-specific indent files

" easy_motions plugin settings
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nnoremap s <Plug>(easymotion-s)

" Goyo plugin settings to make :q quit vim, not just Goyo
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd User GoyoEnter :call <SID>goyo_enter()
autocmd User GoyoLeave :call <SID>goyo_leave()

" more Goyo plugin settings to get the background right
autocmd User GoyoEnter :highlight Normal ctermbg=234
autocmd User GoyoLeave :highlight Normal ctermbg=none

" Limelight plugin settings
let g:limelight_conceal_ctermfg = 'gray'

syntax enable " enable syntax processing
set t_Co=256
colorscheme wombat256

" set timeout
set timeout timeoutlen=200 ttimeoutlen=50

" Added for markdown syntax highlighting
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" for vimroom bug fix when quitting
" Quitting whether Vimroom is active or not
ca wq :w<cr>:call Quit()<cr>
ca q :call Quit()<cr>
function! Quit()
    if winnr('$') > 3
        VimroomToggle
    endif
    quit
endfunction

let mapleader = "\<Space>"
nmap <silent> <Leader>v <Plug>VimroomToggle
let g:vimroom_navigation_keys = 0

" search options
set incsearch
set hlsearch
set ignorecase
set smartcase
" keymapping that clears search highlighting (no highlighting)
nnoremap <leader><space> :noh<cr>

" integrate with system clipboard
set clipboard=unnamed

" encoding
set encoding=utf-8

set autoindent  " basic indentation (does not interfere with filetype indent)

" tabs
set expandtab
set tabstop=2
set shiftwidth=2

" whitespace
set list
set listchars=tab:»\ ,trail:·

" escape
inoremap jj <ESC>

" disable arrows
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" http://vim.wikia.com/wiki/Prevent_escape_from_moving_the_cursor_one_character_to_the_left
" https://stackoverflow.com/questions/2295410/prevent-cursor-from-moving-back-one-character-on-insert-mode-exit
" inoremap <silent> <Esc> <C-O>:stopinsert<CR>
inoremap <silent> <Esc> <Esc>`^

" crosshair effect on cursor position
set cursorline
"highlight cursorline cterm=bold ctermbg=none
set cursorcolumn

" disable auto comment on ENTER
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" to insert blank lines
map <Enter> o<ESC>
map <S-Enter> O<ESC>
nmap oo o<Esc>o

" enable mouse in normal mode
set mouse=n

" show the filename in the window titlebar
set title

" start scrolling three lines before the horizontal window border
set scrolloff=3

" undo previous actions even after you close and reopen a file
set undofile

" turns off Vim’s default regex and makes searches use normal regexes
nnoremap / /\v
vnoremap / /\v

" applies substitutions globally on lines
set gdefault

" make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" one less key to hit every time I want to save a file
nnoremap ; :

" save on losing focus
au FocusLost * :wa

au FocusLost * :set number
au FocusGained * :set relativenumber

" disable Ex mode
nnoremap Q <nop>

" load matchit.vim: % recognises regex etc
runtime! macros/matchit.vim

" more from sensible.vim
set backspace=indent,eol,start  "Allow backspace in insert mode
set complete-=i
set showcmd                     "Show incomplete cmds in bottom right corner
set wildmenu
set smarttab

" easy_motions plugin settings
let g:EasyMotion_do_mapping = 0 " Disable default mappings
nmap s <Plug>(easymotion-s)

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" No annoying sound on errors
set noerrorbells


